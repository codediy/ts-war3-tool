
<html>
<head>
<title>JASS Manual: Library Functions</title>
<link rel="stylesheet" href="style.css" type="text/css">
</head>

<body>



<p><strong>Library Functions</strong>

<p>Many native functions and constants are declared in <tt>common.j</tt>,
<tt>common.ai</tt>, and <tt>Blizzard.j</tt>. This section will descibe
several functions that are of note. Obviously, this section is incomplete;
if you have written or have found a more thorough description of the native
API, I would be happy to link it here. See the 
<a href="api/index.shtml">API Browser</a> section for a listing of the API.

<p><em>Important Note</em>: Others have observed
that the following functions in 
<tt>common.j</tt> do not function correctly when used in AI scripts:

<ul>
<li>native functions that return <code>string</code>.
<li>native functions that take callbacks (<code>code</code>, 
<code>trigger</code>, <code>boolexpr</code>, etc.) as
arguments such as triggers and enumerators (<code>ForGroup</code>, etc.).
<li><code>ExecuteFunc</code>.
</ul>

These functions work normally in map scripts. 
Also be aware that native functions declared
in <tt>common.ai</tt> are obviously not available to map scripts.

<p>There are 3 common.ai functions that work for map scripts, once you manually add them to common.j , those functions are <a href="api/common_ai-functions.shtml#GetUnitGoldCost">GetUnitGoldCost</a> , <a href="api/common_ai-functions.shtml#GetUnitWoodCost">GetUnitWoodCost</a> and <a href="api/common_ai-functions.shtml#GetUnitBuildTime">GetUnitBuildTime</a>

<p>The current list of topics are:

<ul>
<li><a href="#threads">Threads</a>
<li><a href="#triggers">Triggers</a>
<li><a href="#isc">Inter-Script Communication</a>
<li><a href="#enumerations">Enumerations</a>
<li><a href="#filters">Filters</a>
</ul>


<p><strong><a name="threads">Threads</a></strong>

<p>Usually only a single thread of execution is started for the AI. 
New threads can be started in an AI script with the function
declared in <tt>common.ai</tt>:

<p>Map scripts, can simply use <a href="api/common_j-functions.shtml#ExecuteFunc">ExecuteFunc</a> to create another thread.

<pre class="source">
<span class="keyword">native</span> StartThread <span class="keyword">takes</span> <span class="type">code</span> func <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>Calling this function via the statement 
<code>call StartThread(function <span class="hi">my_func</span>)</code> 
causes a new
thread to begin execution starting at the beginning of the <code>my_func</code>
function.

<p>There are 6 thread slots per player. This includes the "main" thread, 
so there is a slot for the main script and 5 extra slots. 
If you have filled all 6 thread slots then further
calls to <code>StartThread()</code> are ignored.
Thread slots are not recycled. Once you have created 5 threads of your own, all
slots are used and you can't start more threads for the same player.

<p>When a new thread is created, it receives time immediately. When the new
thread yields (gives up the interpreter), the thread that created it resumes. 

<p>Threads can yield in the following ways:
<ul>
<li>
There is an opcode execution limit; when a thread runs more opcodes than the
limit it is put to sleep automatically for 1 second. 
<li>
When a thread calls the <code>Sleep(N)</code> function, it is put to sleep
and will resume after <code>N</code> seconds. 
</ul>

<p>Threads can terminate in the following ways:

<ul>
<li>
If there was no main function (e.g., it was <code>null</code>), 
the thread is terminated. 
<li>
When the thread's main function returns, it exits.
<li>
If a thread uses a variable that was not set before it was used, then it is
terminated. (All variables must be set before they are used.)
<li>
If a thread executes a divide by 0, it is terminated.
</ul>

<p>You should never let the main thread (the one that is started by
the game automatically) exit.
For example, you can call <code>SleepForever()</code> at the
end of the <code>main</code> function to avoid exiting.

<p>All threads for a single AI player share global state, so
if you modify a global variable in one thread, the change will be visible
in other threads in the same script. You can not start new threads in
map scripts.


<p><strong><a name="triggers">Triggers</a></strong>

<p>A trigger, used in a map script, is a callback; that is, it an
event handler that is installed to execute when a particular event(s) occur.
Triggers do not function properly in AI scripts.
A trigger is of type <code>trigger</code> which is a subtype of 
<code>handle</code> (hence it is just a pointer to some in game 
data-structure).

<p>New triggers are created with the function (in 
<tt>common.j</tt>):

<pre class="source">
<span class="keyword">native</span> CreateTrigger <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> trigger
</pre>

<p>The actual trigger contains <em>conditions</em> and <em>actions</em>.
The conditions are a set of <code>boolexpr</code>s. These are handle types
which encapsulate functions that return booleans. A condition 
<code>boolexpr</code> can be created with the following function. The
argument function should have the signature
<code>takes nothing returns boolean</code>.
(<code>conditionfunc</code> is a subtype of <code>boolexpr</code>)

<pre class="source">
<span class="keyword">native</span> Condition <span class="keyword">takes</span> <span class="type">code</span> func <span class="keyword">returns</span> conditionfunc
</pre>

<p>A condition is added to a trigger with the function:

<pre class="source">
<span class="keyword">native</span> TriggerAddCondition <span class="keyword">takes</span> trigger whichTrigger, 
                                 boolexpr condition <span class="keyword">returns</span> triggercondition
</pre>

<p>It returns a handle to the condition which can be used later in other
trigger related functions (e.g., if you want to remove the condition from
the trigger).

<p>Actions are just functions which execute when the event occurs and the
conditions are satisfied. They should have the signature
<code>takes nothing returns nothing</code>.

<pre class="source">
<span class="keyword">native</span> TriggerAddAction <span class="keyword">takes</span> trigger whichTrigger, 
                              <span class="type">code</span> actionFunc <span class="keyword">returns</span> triggeraction
</pre>

<p>Again, the function returns a handle to the action, in case it must be
refered to later.

<p>Once a trigger is created, it is must be registered with a game event(s)
which indicate when it will be executed. This is accomplished using the
functions that look like this in <tt>common.j</tt>:

<pre class="source">
<span class="keyword">native</span> TriggerRegister<span class="hi">*</span>Event <span class="keyword">takes</span> trigger whichTrigger, <span class="hi">...</span> <span class="keyword">returns</span> event
</pre>

<p>There are many other trigger manipulation functions in <tt>common.j</tt>
that can help trigger management.


<p><strong><a name="isc">Inter-Script Communication</a></strong>

<p>During a game, there will be several independent JASS scripts executing;
one for the map trigger script, and one AI script for each computer player.
The global variables in each of these scripts are not shared, so setting
a global value in one AI script will not affect the same global variable
in another computer's AI script.

<p>The map script and AI scripts can communicate with each other using
<em>commands</em>. A command is a pair of integer values, a 
<code>command</code> value and a <code>data</code> value. To send a command
to a particular AI script, use the function (declared in <tt>common.j</tt>):

<pre class="source">
<span class="keyword">native</span> CommandAI <span class="keyword">takes</span> player num, <span class="type">integer</span> command, <span class="type">integer</span> data <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>Each computer player has a command <em>stack</em> onto which new commands
sent to them are placed. To determine how many commands are waiting on the
stack, use the following function (declared in <tt>common.ai</tt>):

<pre class="source">
<span class="keyword">native</span> CommandsWaiting <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">integer</span>
</pre>

<p>To look at the command at the top of the stack, use the following functions:

<pre class="source">
<span class="keyword">native</span> GetLastCommand <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">integer</span>
<span class="keyword">native</span> GetLastData <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">integer</span>
</pre>

<p>Which return the latest <code>command</code> and <code>data</code> values 
sent, respectively. These functions merely look at the command at the top of
the stack; they do not remove it. To remove the command at the top of the
stack, use:

<pre class="source">
<span class="keyword">native</span> PopLastCommand <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>Remember that adding a new element to a stack places it on top, while
popping an element off the stack also removes the first from the top.


<p><strong><a name="enumerations">Enumerations</a></strong>

<p>Although defining custom data structures in JASS is impossible due to the
lack of first class pointers, the native API does provide a crude
implementation of <em>sets</em> for certain handle types. 
A set of <code>unit</code>s 
is called a <code>group</code>; a set of <code>player</code>s is called a 
<code>force</code>; you can also work with a set of <code>destructable</code>s
(doodads that can be destroyed), but there is no type that names the set.

<p>The API for managing custom groups and forces is similar. For example,
to create, add an element, and remove an element to a group and force
respectively:

<pre class="source">
<span class="comment">// group management</span>
<span class="keyword">native</span> CreateGroup <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> group
<span class="keyword">native</span> GroupAddUnit <span class="keyword">takes</span> group whichGroup, unit whichUnit <span class="keyword">returns</span> <span class="type">nothing</span>
<span class="keyword">native</span> GroupRemoveUnit <span class="keyword">takes</span> group whichGroup, unit whichUnit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// force management</span>
<span class="keyword">native</span> CreateForce <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> force
<span class="keyword">native</span> ForceAddPlayer <span class="keyword">takes</span> force whichForce, player whichPlayer <span class="keyword">returns</span> <span class="type">nothing</span>
<span class="keyword">native</span> ForceRemovePlayer <span class="keyword">takes</span> force whichForce, player whichPlayer <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>A common design pattern used with a set is an <em>iterator</em> or
<em>enumeration</em>. An enumeration is an interface that allows you
to retrieve each element from the set and operate it. Usually, you want to
express the notion "for each element in the set, do something to it" in the
same way you would iterate through an array. For example, the
standard way to process each element in a set in Java (and similarly
in C++) is:

<pre class="source">
<span class="comment">// While the iterator of 'set' has more elements in it</span>
for (Iterator iter = set.iterator(); iter.hasNext(); ) {
      <span class="comment">// Retreive the next element from the iterator</span>
      Object element = iter.next();
      <span class="comment">// Do something with it...</span>
      processElement(element);
}
</pre>

<p>In JASS, there is no way<sup>*</sup> to "look inside" a 
<code>group</code> or
<code>force</code> directly, so the native API relies on callbacks to
achieve the same functionality. To process each element in a group
and force respectively, use the following functions. The callback function
has the signature <code>takes nothing returns nothing</code>.

<pre class="source">
<span class="comment">// For each unit in 'whichGroup' call the 'callback' function</span>
<span class="keyword">native</span> ForGroup <span class="keyword">takes</span> group whichGroup, <span class="type">code</span> callback <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// For each player in 'whichForce' call the 'callback' function</span>
<span class="keyword">native</span> ForForce <span class="keyword">takes</span> force whichForce, <span class="type">code</span> callback <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>A similar function exists to process each element in a destructable
set that consists of all destructables in a certain <code>rect</code> 
(a rectangular region of the map). See the subsection on 
<a href="#filters">Filters</a> for more information on the 
<code>boolexpr</code>.

<sup>*</sup> One way to get around this apparent limitation is
by using the <code>FirstOfGroup()</code> and 
<code>GroupRemoveUnitSimple()</code> functions to iterate through
a temporary group 
(see <a href="http://kattana.users.whitehat.dk/viewfunc.php?id=25">this</a>
for an example). This is useful in AI scripts where callbacks do not work.

<pre class="source">
<span class="comment">// For each destructable in 'r' that satisfies 'filter', call the 'actionFunc' function</span>
<span class="keyword">native</span> EnumDestructablesInRect <span class="keyword">takes</span> rect r, boolexpr filter, <span class="type">code</span> actionFunc <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>Within the callback function, you retreive the next element to process
with the functions (for groups, forces, destructable sets, respectively):

<pre class="source">
<span class="keyword">constant native</span> GetEnumUnit         <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> unit
<span class="keyword">constant native</span> GetEnumPlayer       <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> player
<span class="keyword">constant native</span> GetEnumDestructable <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> destructable
</pre>

<p>
(These enumerators to not work correctly in AI scripts so only use them
in map scripts)
For example, suppose you wanted to kill all the units in a group.
You could use the following callback function:

<pre class="source">
<span class="keyword">function</span> KillGroupCallback <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">nothing</span>
     <span class="comment">// Get the next unit to process</span>
<span class="keyword">     local</span> unit nextUnit = GetEnumUnit()
     <span class="comment">// Kill it</span>
<span class="keyword">     call</span> KillUnit(nextUnit)
<span class="keyword">endfunction</span>
</pre>

<p>Then you can kill all the units in a group with the following statement:

<pre class="source">
<span class="keyword">     call</span> ForGroup(groupToKill, function KillGroupCallback)
</pre>

<p>Another common operation is to find the
element(s) in a set that satisfies certain conditions in relation to the
other elements in the set. For example,
you might want to find the unit with the most life in a group. 
Unfortunately, because JASS relies on callbacks to process each element,
the only way to maintain state across all the elements in a set is to
use a global variable. For example, to find the unit with the most life
in a group, you could use the code:

<pre class="source">
<span class="keyword">globals</span>
     <span class="type">real</span> mostLifeSoFar
     unit unitWithMostLifeSoFar
<span class="keyword">endglobals</span>

<span class="keyword">function</span> MostLifeCallback <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">nothing</span>
<span class="keyword">     local</span> unit nextUnit = GetEnumUnit()
<span class="keyword">     local</span> <span class="type">real</span> life = GetUnitState(nextUnit, UNIT_STATE_LIFE)
 
<span class="keyword">     if</span> life > mostLifeSoFar <span class="keyword">then</span>
<span class="keyword">          set</span> mostLifeSoFar = life
<span class="keyword">          set</span> unitWithMostLifeSoFar = nextUnit
<span class="keyword">     endif</span>
<span class="keyword">endfunction</span>

...
     <span class="comment">// Initialize variables to find unit with max life in 'myGroup'</span>
<span class="keyword">     set</span> mostLifeSoFar = 0
<span class="keyword">     set</span> unitWithMostLifeSoFar = null
     <span class="comment">// Process each element in 'myGroup'</span>
<span class="keyword">     call</span> ForGroup(myGroup, function MostLifeCallback)
     <span class="comment">// Now 'unitWithMostLifeSoFar' refers to the desired unit, </span>
     <span class="comment">// or null if the group was empty</span>
...
</pre>

<p>Finally, you should note that you can achieve most of the same
functionality with arrays instead of groups and forces, since an array
can be viewed as a set. The drawbacks are that an array always uses up
a certain amount of storage (see <a href="types.shtml">Types</a>),
you will end up with "holes" in your set if you remove elements in the
middle of the array, and you can not use the filter functions described
in the <a href="#filters">Filters</a> subsection directly to create
array sets (though you can use them to first create a group, then use
enumeration callbacks to fill your array). In addition, you can not have
an array of arrays, whereas you can have an array of groups or forces.


<p><strong><a name="filters">Filters</a></strong>

<p>The <a href="#enumerations">Enumerations</a> subsection described one way
to create sets (groups and forces), but sometimes it is desirable to 
dynamically create a set containing all elements with particular properties.
For example, you might want to create a group containing all the units with
less than 20 mana (then you can use <code>ForGroup(...)</code> to do something
to each of them).

<p>There are several native functions that facilitate this. For example, 
the following functions can be used to fill groups. They take a group
as an argument and add all units that satisfy a certain property to the group.

<pre class="source">
<span class="comment">// Add all units that are of type 'unitname' and satisfy the 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsOfType <span class="keyword">takes</span> group whichGroup, <span class="type">string</span> unitname, 
  boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that belong to 'whichPlayer' and satisfy the 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsOfPlayer <span class="keyword">takes</span> group whichGroup, player whichPlayer, 
  boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add up to 'countLimit' units of type 'unitname' that satisty the 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsOfTypeCounted <span class="keyword">takes</span> group whichGroup, <span class="type">string</span> unitname, 
  boolexpr filter, <span class="type">integer</span> countLimit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are in the rectable 'r' and satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRect <span class="keyword">takes</span> group whichGroup, rect r, boolexpr filter 
  <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add up to 'countLimit' of units that are in 'r' and satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRectCounted <span class="keyword">takes</span> group whichGroup, rect r, 
  boolexpr filter, <span class="type">integer</span> countLimit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are within 'radius' of the point ('x','y') and </span>
<span class="comment">// satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRange <span class="keyword">takes</span> group whichGroup, <span class="type">real</span> x, <span class="type">real</span> y, 
  <span class="type">real</span> radius, boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are within 'radius' of the point 'location' and </span>
<span class="comment">// satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRangeOfLoc <span class="keyword">takes</span> group whichGroup, 
  location whichLocation, <span class="type">real</span> radius, boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add up to 'countLimit' units that are within 'radius' of the </span>
<span class="comment">// point ('x','y') and satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRangeCounted <span class="keyword">takes</span> group whichGroup, <span class="type">real</span> x, <span class="type">real</span> y, 
  <span class="type">real</span> radius, boolexpr filter, <span class="type">integer</span> countLimit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add up to 'countLimit' units that are within 'radius' of the point </span>
<span class="comment">// 'location' and satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsInRangeOfLocCounted <span class="keyword">takes</span> group whichGroup, 
  location whichLocation, <span class="type">real</span> radius, boolexpr filter, 
  <span class="type">integer</span> countLimit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are selected by 'whichPlayer' and satisfy 'filter'</span>
<span class="keyword">native</span> GroupEnumUnitsSelected <span class="keyword">takes</span> group whichGroup, player whichPlayer,
  boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>A similar set of functions exist for adding players to forces:

<pre class="source">
<span class="comment">// Add all players that satisfy 'filter'</span>
<span class="keyword">native</span> ForceEnumPlayers <span class="keyword">takes</span> force whichForce, boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add up to 'countLimit' players that satisfy 'filter'</span>
<span class="keyword">native</span> ForceEnumPlayersCounted <span class="keyword">takes</span> force whichForce, boolexpr filter,
  <span class="type">integer</span> countLimit <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are allies of 'whichPlayer' that satisfy 'filter'</span>
<span class="keyword">native</span> ForceEnumAllies <span class="keyword">takes</span> force whichForce, player whichPlayer,
  boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>

<span class="comment">// Add all units that are enemies of 'whichPlayer' that satisfy 'filter'</span>
<span class="keyword">native</span> ForceEnumEnemies <span class="keyword">takes</span> force whichForce, player whichPlayer,
  boolexpr filter <span class="keyword">returns</span> <span class="type">nothing</span>
</pre>

<p>Each of these functions takes a <code>boolexpr</code> which is also used
for conditions in triggers (see the <a href="#triggers">Triggers</a>
subsection). In particular, you will usually pass in a <code>filterfunc</code>
(which is nearly identical to a <code>conditionfunc</code>). A filterfunc
encapsulates a boolean function just like a conditionfunc. To create a
filterfunc use:

<pre class="source">
<span class="keyword">native</span> Filter <span class="keyword">takes</span> <span class="type">code</span> func <span class="keyword">returns</span> filterfunc
</pre>

<p>The argument's function signature should be <code>takes nothing returns
boolean</code>. The filter serves as an additional condition that each
element must satisfy before being added to the group or force. Filters
work like enumerations; when one of the above functions are used to add
elements to sets, each element that satisfies the initial property (all
units in a region, all players allied with some player, etc.) is "passed"
to the filter function. If the filter function returns true, then the
element is added, otherwise it is not. In the filter callback, you can
retrieve the next unit, player, and destructable doodad to examine with
the following functions, respectively:

<pre class="source">
<span class="keyword">constant native</span> GetFilterUnit         <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> unit
<span class="keyword">constant native</span> GetFilterPlayer       <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> player
<span class="keyword">constant native</span> GetFilterDestructable <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> destructable
</pre>

<p>For example, if I wanted to create a filter that is only satisfied by
units with less than 20 mana, I can use the following callback funtion:

<pre class="source">
<span class="keyword">function</span> LessThan20ManaCallback <span class="keyword">takes</span> <span class="type">nothing</span> <span class="keyword">returns</span> <span class="type">boolean</span>
     <span class="comment">// Get the next unit to examine</span>
<span class="keyword">     local</span> unit nextUnit = GetFilterUnit()
     <span class="comment">// Check to see if it satisfies our condition</span>
<span class="keyword">     return</span> GetUnitState(nextUnit, UNIT_STATE_MANA) < 20
<span class="keyword">endfunction</span>
</pre>

<p>Then, I can use the following statements to add all units that are in
a particular region and have less than 20 mana into my group:

<pre class="source">
     <span class="comment">// Create the filter</span>
<span class="keyword">     local</span> filterfunc myFilter = Filter(function LessThan20ManaCallback)
     <span class="comment">// Add all satisfying units in 'someRect' into 'myGroup'</span>
<span class="keyword">     call</span> GroupEnumUnitsInRect(myGroup, someRect, myFilter)
     <span class="comment">// Destroy the filter if we are not going to use it again</span>
<span class="keyword">     call</span> DestroyFilter(myFilter)
</pre>

<p>Note that we destroy the filter after we are done with it so there is
not a memory leak.

<p>If no additional condition is required, then you can pass in the value 
<code>null</code> instead of an actual <code>filterfunc</code>.



</body>
</html>
